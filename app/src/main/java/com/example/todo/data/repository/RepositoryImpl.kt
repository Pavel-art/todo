package com.example.todo.data.repositoryimport androidx.lifecycle.MutableLiveDataimport com.example.todo.domain.entity.TodoModelimport com.example.todo.domain.repository.Repositoryobject RepositoryImpl : Repository {    private var todoList =  sortedSetOf<TodoModel>({ o1, o2 -> o1.id.compareTo(o2.id) })    private val list = MutableLiveData<List<TodoModel>>()    private var autoincrementId = 0    override fun deleteTodo(todo: TodoModel) {        todoList.remove(todo)        updateList()    }    override fun addTodo(todo: TodoModel) {        if (todo.id == TodoModel.UNDEFINED_ID) {            todo.id = autoincrementId++        }        todoList.add(todo)        updateList()    }    override fun getTodoItem(todoId: Int): TodoModel {        val item = todoList.find { it.id == todoId }        return item ?: throw RuntimeException("Element with id $todoId not found")    }    override fun getAllTodos(): MutableLiveData<List<TodoModel>> {        return list    }    override fun completedTodo(todo: TodoModel) {        val item = getTodoItem(todo.id)        todoList.remove(item)        addTodo(item)    }    private fun updateList() {        list.value = todoList.toList()    }}