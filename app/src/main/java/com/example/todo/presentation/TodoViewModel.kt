package com.example.todo.presentationimport androidx.lifecycle.LiveDataimport androidx.lifecycle.MutableLiveDataimport androidx.lifecycle.ViewModelimport com.example.todo.data.repository.RepositoryImplimport com.example.todo.domain.entity.TodoModelimport com.example.todo.domain.usecases.*class TodoViewModel : ViewModel() {    private val repository = RepositoryImpl    private val addTodoUseCase = AddTodoUseCase(repository)    private val getAllTodosUseCase = GetAllTodosUseCase(repository)    private val getTodoItemUseCase = GetTodoItemUseCase(repository)    private val deleteTodoUseCase = DeleteTodoUseCase(repository)    private val completedTodoUseCase = CompletedTodoUseCase(repository)    private val _errorInputTitle = MutableLiveData<Boolean>()    val errorInputTitle: LiveData<Boolean>        get() = _errorInputTitle    private val _shouldCloseScreen = MutableLiveData<Unit>()    val shouldCloseScreen: LiveData<Unit>        get() = _shouldCloseScreen    private val _todoItem = MutableLiveData<TodoModel>()    val todoItem: LiveData<TodoModel>        get() = _todoItem    val todoList = getAllTodosUseCase.invoke()    fun completedTodo(todo: TodoModel) {            val newTodo = todo.copy(completed = !todo.completed)            completedTodoUseCase.invoke(newTodo)    }    fun getTodoItem(todoId: Int) {        val item = getTodoItemUseCase.invoke(todoId)        _todoItem.value = item    }    fun addTodo(title: String) {        if (validTitle(title)) {            val parseText = parseTitle(title)            val todo = TodoModel(                title = parseText,            )            addTodoUseCase.invoke(todo)            finishWork()        }    }    fun removeTodo(todo: TodoModel) {        deleteTodoUseCase.invoke(todo)    }    private fun parseTitle(title: String?): String {        return title?.trim().toString() ?: ""    }    private fun validTitle(title: String?): Boolean {        var result = true        if (title != null && title.isBlank()) {            _errorInputTitle.value = true            result = false        }        return result    }    fun resetErrorInputTitle() {        _errorInputTitle.value = false    }    private fun finishWork() {        _shouldCloseScreen.value = Unit    }}